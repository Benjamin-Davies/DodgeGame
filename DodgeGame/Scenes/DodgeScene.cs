using DodgeGame.Properties;
using DodgeGame.Sprites;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Windows.Forms;

namespace DodgeGame.Scenes
{
    /// <summary>
    /// The main scene in which the player dodges planets
    /// </summary>
    public partial class DodgeScene : UserControl, IScene
    {
        // Constant values
        private const int planetHeight = 77;
        private const int starHeight = 10;

        // Member variables for storing the state of the game
        private int score;
        private int livesLeft;
        private bool paused;
        private List<BackgroundStar> stars;
        private List<Planet> planets;
        private Spaceship spaceship;
        private Random random;
        private Stopwatch timeSinceResume;
        private MainWindow form;
        private Navigator navigator;

        // If the mouse is currently over the window
        public bool MouseOverWindow = true;

        public DodgeScene(MainWindow _form, Navigator _navigator)
        {
            // Set up the controll (code generated by designer)
            InitializeComponent();

            // Init variables
            form = _form;
            navigator = _navigator;

            // Initialize a random number generator
            random = new Random();

            // Initialize the time since resume stopwatch
            timeSinceResume = new Stopwatch();
        }

        /// <summary>
        /// Reset the game
        /// </summary>
        public void Reset()
        {
            // Reset the score and lives
            score = 0;
            livesLeft = Settings.Default.LifeCount;

            // Create a list of stars and a list of planets
            stars = new List<BackgroundStar>();
            planets = new List<Planet>();

            // Create a spaceship
            spaceship = new Spaceship();
        }

        /// <summary>
        /// Is called whenever the scene is temporarily hidden
        /// </summary>
        public void Pause()
        {
            paused = true;
        }

        /// <summary>
        /// Is called whenever the scene is about to be shown
        /// </summary>
        public void Resume()
        {
            paused = false;
            timeSinceResume.Restart();
        }

        /// <summary>
        /// Draw all of the objects
        /// </summary>
        public void DodgeScene_Paint(object sender, PaintEventArgs e)
        {
            var g = e.Graphics;
            var backColor = new SolidBrush(Resources.BackColor);
            var foreColor = new SolidBrush(Resources.ForeColor);

            // Clear the screen
            g.DrawImage(Resources.background, e.ClipRectangle);

            if (!MouseOverWindow && timeSinceResume.ElapsedMilliseconds > 500)
            {
                var font = new Font(form.Font.FontFamily, 72);
                var format = new StringFormat
                {
                    Alignment = StringAlignment.Center,
                    LineAlignment = StringAlignment.Center
                };
                g.DrawString(
                    "Move The Mouse\nTo Over\nThe Window",
                    font,
                    Brushes.SkyBlue,
                    new PointF(e.ClipRectangle.Width / 2f, e.ClipRectangle.Height / 2f),
                    format);
            }

            // Loop through all of the stars and draw them
            foreach (var star in stars)
            {
                star.Draw(g);
            }

            // Loop through all of the planets and draw them
            foreach (var planet in planets)
            {
                planet.Draw(g);
            }

            // Draw the spaceship
            spaceship.Draw(g);

            // Draw the text
            g.DrawString($"Score: {score}", form.Font, foreColor, 5, 5);
            g.DrawString($"Lives: {livesLeft}", form.Font, foreColor, 5, 15 + form.Font.Size);
        }

        /// <summary>
        /// Update the scene
        /// </summary>
        public void UpdateScene()
        {
            // Temporary measure to stop score from increasing when a dialog is showing
            // TODO: remove once we switch scenes instead of dialogs
            if (!PlanetTimer.Enabled)
                return;

            // Increment the score
            score++;

            // Remove the planets that have fallen off of the screen
            // We use a reverse for loop so that, when we remove planets, we dont skip any
            for (int i = planets.Count - 1; i >= 0; i--)
            {
                if (planets[i].Position.Y > form.ClientSize.Height)
                    planets.RemoveAt(i);
            }

            // Speed up the planets with the score
            Planet.Speed = 10 + score / 200f;

            // Loop through the stars and update them
            foreach (var star in stars)
            {
                star.Update(form.ClientSize);
            }

            // Loop through the planets and update them
            foreach (var planet in planets)
            {
                planet.Update(form.ClientSize);
            }

            // Update our spaceship
            spaceship.Update(form.ClientSize);

            // Check for collisions
            if (CheckCollisions())
            {
                // Remove all of the planets and decrement lifeCount
                planets.Clear();
                livesLeft--;

                // Disable updates while we prompt the user
                PlanetTimer.Enabled = false;
                StarTimer.Enabled = false;

                // Check if we are out of lives
                if (livesLeft <= 0)
                {
                    // Tell the user he/she is out of lives and exit the scene
                    navigator.Replace(new TextScene(form, navigator, $"Game Over!\n{Settings.Default.Username} finished with {score} points."));

                    // Upload the user's score
                    if (!Settings.Default.ScoreboardOptOut)
                    {
                        Scoreboard.PostScore(new Scoreboard.ScoreData
                        {
                            Username = Settings.Default.Username,
                            LifeCount = Settings.Default.LifeCount,
                            Score = score
                        });
                    }
                }
                else
                {
                    // Tell the user he/she died
                    navigator.Push(new TextScene(form, navigator, "You have been hit by a planet"));
                }

                // Enable the timers again
                PlanetTimer.Enabled = true;
                StarTimer.Enabled = true;
            }

            // Tell winforms to redraw the scene
            Invalidate();
        }

        /// <summary>
        /// Check if the spaceship has collided with a planet
        /// </summary>
        private bool CheckCollisions()
        {
            // Loop through all of the planets
            foreach (var planet in planets)
            {
                // And check if the intersect with our spaceship
                if (planet.CollidesWith(spaceship.Rectangle))
                    return true;
            }
            return false;
        }

        /// <summary>
        /// Spawn a new planet
        /// </summary>
        private void PlanetTimer_Tick(object sender, EventArgs e)
        {
            // Don't create new planets if the game is paused
            if (paused) return;

            // Choose a random position for the new planet
            var xPosition = random.Next(0, form.ClientSize.Width - planetHeight);

            // Choose a random rotation and rotation speed
            var rotation = 360 * (float)random.NextDouble();
            var rotationSpeed = -5 + 10 * (float)random.NextDouble();

            // Create a new planet and add it to the planets list
            var planet = new Planet(new PointF(xPosition, -planetHeight), rotation, rotationSpeed);
            planets.Add(planet);
        }

        /// <summary>
        /// Spawn a new star
        /// </summary>
        private void StarTimer_Tick(object sender, EventArgs e)
        {
            // Don't create new stars if the game is paused
            if (paused) return;

            // Choose a random position and speed for the new star
            var xPosition = random.Next(0, form.ClientSize.Width - starHeight);
            var speed = 0.25 + 0.5 * random.NextDouble();

            // Create a new star and add it to the stars list
            var star = new BackgroundStar(new PointF(xPosition, -starHeight), (float)speed);
            stars.Add(star);
        }

        /// <summary>
        /// Move the spaceship so that it lines up with the mouse
        /// </summary>
        public void DodgeScene_MouseMove(object sender, MouseEventArgs e)
        {
            // Move the spaceship to in line with the mouse
            spaceship.ToMouse = e.X - (spaceship.Position.X + spaceship.Size.Width / 2f);
        }

        /// <summary>
        /// Is called when the scene is first created
        /// </summary>
        private void DodgeScene_Load(object sender, EventArgs e)
        {
            // Fill the window
            Dock = DockStyle.Fill;

            // Reset the game
            Reset();
        }

        /// <summary>
        /// Is called when the mouse enters the window
        /// </summary>
        private void DodgeScene_MouseEnter(object sender, EventArgs e)
        {
            MouseOverWindow = true;
        }

        /// <summary>
        /// Is called when the mouse leaves the window
        /// </summary>
        private void DodgeScene_MouseLeave(object sender, EventArgs e)
        {
            MouseOverWindow = false;
        }
    }
}
